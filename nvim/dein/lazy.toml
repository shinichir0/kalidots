#Lang

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
    autocmd FileType python setlocal completeopt-=preview
    let g:jedi#use_tabs_not_buffers = 1
'''
    #let g:jedi#completions_command = "<C-I>"
    #let g:jedi#popup_on_dot = 0

[[plugins]]
repo = 'ervandew/supertab'
on_ft = 'python'
hook_add = '''
    let g:SuperTabContextDefaultCompletionType = "context"
    let g:SuperTabDefaultCompletionType = "<c-n>"
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

#[[plugins]]
#repo = 'kevinw/pyflakes-vim'
#on_ft = 'python'

[[plugins]]
repo = 'nvie/vim-flake8'
on_ft = 'python'

[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'mkd']
hook_add = '''
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_conceal = 0
    let g:tex_conceal = ""
    let g:vim_markdown_math = 1
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_toml_frontmatter = 1
    let g:vim_markdown_json_frontmatter = 1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown', 'mkd']

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex', 'plaintex']
hook_add = '''
    let g:tex_conceal = ""
    let g:vimtex_compiler_latexmk = {
      \ 'background': 1,
      \ 'build_dir': '',
      \ 'continuous': 1,
      \ 'options': [
      \    '-pdfdvi', 
      \    '-verbose',
      \    '-file-line-error',
      \    '-synctex=1',
      \    '-interaction=nonstopmode',
      \],
      \}
    let g:vimtex_compiler_progname = 'nvr'
    augroup filetype
        autocmd!
        autocmd BufRead,BufNewFile *.tex set filetype=tex
    augroup END
'''

[[plugins]]
repo = 'itchyny/vim-parenmatch'
on_ft = ['c']
hook_add = '''
    set noshowmatch
    let g:loaded_matchparen = 1
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo = 'baabelfish/nvim-nim'
on_ft = ['nim']

[[plugins]]
repo = 'zah/nim.vim'
on_ft = ['nim']
hook_add = '''
    set nofoldenable
    fun! JumpToDef()
        if exists("*GotoDefinition_" . &filetype)
            call GotoDefinition_{&filetype}()
        else
            exe "norm! \<C-]>"
        endif
    endf

    " Jump to tag
    nn <M-g> :call JumpToDef()<cr>
    ino <M-g> <esc>:call JumpToDef()<cr>i
'''
